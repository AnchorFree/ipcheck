# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1.9
    working_directory: /go/src/github.com/ahammond/ipcheck
    environment:
      DEP_VERSION: "0.5.0"
      GHR_VERSION: "0.10.2"
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - restore_cache:
          keys:
            - v1-pkg-cache
      - run: mkdir -p $TEST_RESULTS
      - run: go get github.com/jstemmer/go-junit-report
      - run: go get github.com/mitchellh/gox
      - run:
          command: |
            curl -L -s https://github.com/tcnksm/ghr/releases/download/v${GHR_VERSION}/ghr_v${GHR_VERSION}_linux_amd64.tar.gz -o /tmp/ghr.tar
            tar xvf /tmp/ghr.tar -C $GOPATH/bin/ ghr_v${GHR_VERSION}_linux_amd64/ghr --strip-components=1
            curl -L -s https://github.com/golang/dep/releases/download/v${DEP_VERSION}/dep-linux-amd64 -o $GOPATH/bin/dep
            chmod +x $GOPATH/bin/*
            dep ensure
      - run: go test -v -race -coverprofile=coverage.txt -covermode=atomic pkg/* 2>&1 | go-junit-report > $TEST_RESULTS/report.xml
      - run: bash <(curl -s https://codecov.io/bash)
      # Skipping on darwin here because... it fails to build and I don't know if anyone cares enough to fix it.
      - run:
          command: |
            PROJECT_LC=$(echo "${CIRCLE_PROJECT_USERNAME}" | tr '[:upper:]' '[:lower:]')
            BASE="github.com/${PROJECT_LC}/${CIRCLE_PROJECT_REPONAME}/cmd"
            LDFLAGS="-X $BASE.Version=$(git describe --tags) -X $BASE.BuildStamp=$(date -u '+%Y-%m-%dT%H:%M:%SZ') -X $BASE.SHA=$(git rev-parse HEAD)"
            gox -os="linux freebsd openbsd" -tags netgo -output "bin/ipcheck_{{.OS}}_{{.Arch}}" -ldflags "$LDFLAGS"
      - save_cache:
          key: v1-pkg-cache
          paths:
            - "/go/pkg"
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_artifacts:
          path: bin
          destination: bin
      - store_test_results:
          path: /tmp/test-results
      - run:
          name: Upload binaries when tagged
          command: |
            # Is there a tag, and does it start with v?
            if [[ "${CIRCLE_TAG}" =~ ^v[0-9]+\.[0-9]+ ]];
            then
              ghr ${CIRCLE_TAG} bin
            fi
  build-docker:
    working_directory: /app
    docker:
      - image: docker:17.06.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Login to Dockerhub
          command: |
            set -u
            docker login --username "${DOCKER_USER:-$CIRCLE_USERNAME}" --password "${DOCKER_PASS}"
      - run:
          name: Fetch or build docker image
          command: |
            # First check to see if the image has already been built,
            # because Build Binaries Only Once.
            PROJECT_LC=$(echo "${CIRCLE_PROJECT_USERNAME}" | tr '[:upper:]' '[:lower:]')
            docker pull "${PROJECT_LC}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" \
            || docker build --cache-from=app --build-arg TAG="$(git describe --tags --abbrev=0)" -t "${PROJECT_LC}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" --label circle.sha="${CIRCLE_SHA1}" --label circle.build_num="${CIRCLE_BUILD_NUM}" .
      - run:
          name: Save docker image layer cache
          command: |
            mkdir -p /caches
            PROJECT_LC=$(echo "${CIRCLE_PROJECT_USERNAME}" | tr '[:upper:]' '[:lower:]')
            docker save -o /caches/app.tar "${PROJECT_LC}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar

      - run:
          name: Tag and push to Dockerhub
          command: |
            PROJECT_LC=$(echo "${CIRCLE_PROJECT_USERNAME}" | tr '[:upper:]' '[:lower:]')
            if [ "${CIRCLE_BRANCH}" ]; then
              docker tag "${PROJECT_LC}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" "${PROJECT_LC}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}"
              # git master == docker latest
              test "master" == "${CIRCLE_BRANCH}" \
              && docker tag "${PROJECT_LC}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" "${PROJECT_LC}/${CIRCLE_PROJECT_REPONAME}:latest"
            elif [ "${CIRCLE_TAG}" ]; then
              docker tag "${PROJECT_LC}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" "${PROJECT_LC}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"
            fi
            docker push "${PROJECT_LC}/${CIRCLE_PROJECT_REPONAME}"

workflows:
  version: 2
  workflow:
    jobs:
      - build:
          context: github_public_repo
          filters:
            tags:
              only: /.*/
      - build-docker:
          context: github_public_repo
          requires:
            - build
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
